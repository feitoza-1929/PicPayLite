// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PicPayLite.Infrastructure;

#nullable disable

namespace PicPayLite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PicPayLite.Domain.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("PicPayLite.Domain.Clients.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentValue")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("DocumentValue");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("PicPayLite.Domain.Tranfers.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Transfers", (string)null);
                });

            modelBuilder.Entity("PicPayLite.Domain.Accounts.Account", b =>
                {
                    b.HasOne("PicPayLite.Domain.Clients.Client", "Client")
                        .WithOne("Account")
                        .HasForeignKey("PicPayLite.Domain.Accounts.Account", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PicPayLite.Domain.ValueObjects.Balance", "Balance", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<float>("Amount")
                                .HasColumnType("real");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("Balance")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PicPayLite.Domain.Tranfers.Transfer", b =>
                {
                    b.OwnsOne("PicPayLite.Domain.ValueObjects.Recipient", "Recipient", b1 =>
                        {
                            b1.Property<Guid>("TransferId")
                                .HasColumnType("uuid");

                            b1.Property<int>("AccountNumber")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TransferId");

                            b1.ToTable("Transfers");

                            b1.WithOwner()
                                .HasForeignKey("TransferId");

                            b1.OwnsOne("PicPayLite.Domain.ValueObjects.Document", "Document", b2 =>
                                {
                                    b2.Property<Guid>("RecipientTransferId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("type")
                                        .HasColumnType("integer");

                                    b2.Property<string>("value")
                                        .IsRequired()
                                        .HasMaxLength(14)
                                        .HasColumnType("character varying(14)");

                                    b2.HasKey("RecipientTransferId");

                                    b2.ToTable("Transfers");

                                    b2.WithOwner()
                                        .HasForeignKey("RecipientTransferId");
                                });

                            b1.Navigation("Document")
                                .IsRequired();
                        });

                    b.OwnsOne("PicPayLite.Domain.ValueObjects.Sender", "Sender", b1 =>
                        {
                            b1.Property<Guid>("TransferId")
                                .HasColumnType("uuid");

                            b1.Property<int>("AccountNumber")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TransferId");

                            b1.ToTable("Transfers");

                            b1.WithOwner()
                                .HasForeignKey("TransferId");

                            b1.OwnsOne("PicPayLite.Domain.ValueObjects.Document", "Document", b2 =>
                                {
                                    b2.Property<Guid>("SenderTransferId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("type")
                                        .HasColumnType("integer");

                                    b2.Property<string>("value")
                                        .IsRequired()
                                        .HasMaxLength(14)
                                        .HasColumnType("character varying(14)");

                                    b2.HasKey("SenderTransferId");

                                    b2.ToTable("Transfers");

                                    b2.WithOwner()
                                        .HasForeignKey("SenderTransferId");
                                });

                            b1.Navigation("Document")
                                .IsRequired();
                        });

                    b.Navigation("Recipient")
                        .IsRequired();

                    b.Navigation("Sender")
                        .IsRequired();
                });

            modelBuilder.Entity("PicPayLite.Domain.Clients.Client", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
